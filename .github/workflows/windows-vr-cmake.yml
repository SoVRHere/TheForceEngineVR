# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Windows/x64 Build VR & publish version tagged commit

on:
  push:
    tags: ['test*.*.*'] # This triggers the workflow only on version tags like v1.0.0, v2.21.52, etc.
    # branches: [ "feature/vr" ]
  # pull_request:
     # branches: [ "feature/build_test" ]

env:
  # Customize the build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo
  
  ARTIFACTS_PATH: ${{github.workspace}}/BuildArtifacts/TheForceEngineVR
  
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
      - name: Checkout code        
        uses: actions/checkout@v4

      - name: Update version file
        run: |
          "const char c_gitVersion[] = ""$(git describe --tags)"";" | Set-Content -Path ${{github.workspace}}/TheForceEngine/gitVersion.h
        
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64  

      - name: Build binaries
        run: |
          cmake.exe -G"Visual Studio 17 2022" -A x64 -B ./BuildArtifacts/Build -DENABLE_VR=ON -DSTART_VR=ON 
          cmake --build ./BuildArtifacts/Build --config RelWithDebInfo

      - name: Build artifacts
        run: |
          cmake --install ./BuildArtifacts/Build --config RelWithDebInfo --prefix ${{env.ARTIFACTS_PATH}}

      #- name: Build binaries
      #  run: MSBuild.exe /p:Configuration=${{env.BUILD_TYPE}} /p:OutDir=${{github.workspace}}/Build/ TheForceEngineVR.sln
        
      #- name: Build artifacts
      #  run: |
      #    mkdir ${{env.ARTIFACTS_PATH}}
      #    robocopy ${{github.workspace}}/Build/ ${{env.ARTIFACTS_PATH}}/ "TheForceEngineVR.exe"
      #    robocopy ${{github.workspace}}/TheForceEngine/ ${{env.ARTIFACTS_PATH}}/ "SDL2.dll"
      #    robocopy ${{github.workspace}}/TheForceEngine/ ${{env.ARTIFACTS_PATH}}/ "SDL2_image.dll"
      #    robocopy ${{github.workspace}}/TheForceEngine/ ${{env.ARTIFACTS_PATH}}/ "VrWrapper.dll"
      #    robocopy ${{github.workspace}}/TheForceEngine/Captions/ ${{env.ARTIFACTS_PATH}}/Captions/ /E
      #    robocopy ${{github.workspace}}/TheForceEngine/Documentation/ ${{env.ARTIFACTS_PATH}}/Documentation/ /E
      #    robocopy ${{github.workspace}}/TheForceEngine/Fonts/ ${{env.ARTIFACTS_PATH}}/Fonts/ /E
      #    robocopy ${{github.workspace}}/TheForceEngine/Mods/ ${{env.ARTIFACTS_PATH}}/Mods/ /E
      #    robocopy ${{github.workspace}}/TheForceEngine/Shaders/ ${{env.ARTIFACTS_PATH}}/Shaders/ /E
      #    robocopy ${{github.workspace}}/TheForceEngine/SoundFonts/ ${{env.ARTIFACTS_PATH}}/SoundFonts/ /E
      #    robocopy ${{github.workspace}}/TheForceEngine/UI_Images/ ${{env.ARTIFACTS_PATH}}/UI_Images/ /E
      #    robocopy ${{github.workspace}}/TheForceEngine/UI_Text/ ${{env.ARTIFACTS_PATH}}/UI_Text/ /E
      #    exit 0 # robocopy returns non zero on success
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: my-artifact
          path: ${{env.ARTIFACTS_PATH}}

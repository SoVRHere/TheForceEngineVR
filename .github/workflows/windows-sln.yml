# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Windows/x64 Build version commit

on:
  push:
    #tags:
    #  - 'v*'  # This triggers the workflow only on version tags like v1.0, v2.1, etc.  
    branches: [ "feature/build_test" ]
  pull_request:
     branches: [ "feature/build_test" ]

env:
  # Customize the build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  
  ARTIFACTS_PATH: ${{github.workspace}}/BuildArtifacts/TheForceEngine

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
      - name: Checkout code        
        uses: actions/checkout@v4
        
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64  

      - name: Build binaries
        run: MSBuild.exe /p:Configuration=${{env.BUILD_TYPE}} /p:OutDir=${{github.workspace}}/Build/ TheForceEngine.sln
        
      - name: Build artifacts
        run: |
          mkdir ${{github.workspace}}/BuildArtifacts/TheForceEngine/
          robocopy ${{github.workspace}}/Build/ ${{github.workspace}}/BuildArtifacts/TheForceEngine/ "TheForceEngine.exe"
          robocopy ${{github.workspace}}/TheForceEngine/ ${{env.ARTIFACTS_PATH}}/ "SDL2.dll"
          robocopy ${{github.workspace}}/TheForceEngine/ ${{env.ARTIFACTS_PATH}}/ "SDL2_image.dll"
          robocopy ${{github.workspace}}/TheForceEngine/Captions/ ${{github.workspace}}/BuildArtifacts/TheForceEngine/Captions/ /E
          robocopy ${{github.workspace}}/TheForceEngine/Documentation/ ${{github.workspace}}/BuildArtifacts/TheForceEngine/Documentation/ /E
          robocopy ${{github.workspace}}/TheForceEngine/Fonts/ ${{github.workspace}}/BuildArtifacts/TheForceEngine/Fonts/ /E
          robocopy ${{github.workspace}}/TheForceEngine/Mods/ ${{github.workspace}}/BuildArtifacts/TheForceEngine/Mods/ /E
          robocopy ${{github.workspace}}/TheForceEngine/Shaders/ ${{env.ARTIFACTS_PATH}}/Shaders/ /E
          robocopy ${{github.workspace}}/TheForceEngine/SoundFonts/ ${{env.ARTIFACTS_PATH}}/SoundFonts/ /E
            
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          path: ${{github.workspace}}/BuildArtifacts/TheForceEngine/
    
  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: my-artifact
          path: ${{github.workspace}}/BuildArtifacts/TheForceEngine/
              
      - name: Compress artifact directory
        run: zip -r TheForceEngine.zip ${{github.workspace}}/BuildArtifacts/TheForceEngine/

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{github.ref_name}}
          release_name: "Release ${{github.ref_name}}"
          draft: false
          prerelease: false

      - name: Upload Release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: ./TheForceEngine.zip  # Path to your artifact file(s)
          asset_name: TheForceEngine.zip  # Custom name for the artifact file
          asset_content_type: application/zip  # Adjust based on file type
          